#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_local_block", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_local_deadlock", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axis_listen_port_TDATA", 16, hls_out, 0, "axis", "out_data", 1),
	Port_Property("s_axis_listen_port_status_TDATA", 8, hls_in, 1, "axis", "in_data", 1),
	Port_Property("s_axis_notifications_TDATA", 88, hls_in, 2, "axis", "in_data", 1),
	Port_Property("m_axis_read_package_TDATA", 32, hls_out, 3, "axis", "out_data", 1),
	Port_Property("s_axis_rx_metadata_TDATA", 16, hls_in, 4, "axis", "in_data", 1),
	Port_Property("s_axis_rx_data_TDATA", 512, hls_in, 5, "axis", "in_data", 1),
	Port_Property("s_axis_rx_data_TKEEP", 64, hls_in, 6, "axis", "in_data", 1),
	Port_Property("s_axis_rx_data_TSTRB", 64, hls_in, 7, "axis", "in_data", 1),
	Port_Property("s_axis_rx_data_TLAST", 1, hls_in, 8, "axis", "in_data", 1),
	Port_Property("m_axis_open_connection_TDATA", 48, hls_out, 9, "axis", "out_data", 1),
	Port_Property("s_axis_open_status_TDATA", 72, hls_in, 10, "axis", "in_data", 1),
	Port_Property("m_axis_close_connection_TDATA", 16, hls_out, 11, "axis", "out_data", 1),
	Port_Property("m_axis_tx_metadata_TDATA", 32, hls_out, 12, "axis", "out_data", 1),
	Port_Property("m_axis_tx_data_TDATA", 512, hls_out, 13, "axis", "out_data", 1),
	Port_Property("m_axis_tx_data_TKEEP", 64, hls_out, 14, "axis", "out_data", 1),
	Port_Property("m_axis_tx_data_TSTRB", 64, hls_out, 15, "axis", "out_data", 1),
	Port_Property("m_axis_tx_data_TLAST", 1, hls_out, 16, "axis", "out_data", 1),
	Port_Property("s_axis_tx_status_TDATA", 64, hls_in, 17, "axis", "in_data", 1),
	Port_Property("runExperiment", 1, hls_in, 18, "ap_none", "in_data", 1),
	Port_Property("useConn", 16, hls_in, 19, "ap_none", "in_data", 1),
	Port_Property("useIpAddr", 16, hls_in, 20, "ap_none", "in_data", 1),
	Port_Property("pkgWordCount", 16, hls_in, 21, "ap_none", "in_data", 1),
	Port_Property("regBasePort", 16, hls_in, 22, "ap_none", "in_data", 1),
	Port_Property("usePort", 16, hls_in, 23, "ap_none", "in_data", 1),
	Port_Property("expectedRespInKB", 16, hls_in, 24, "ap_none", "in_data", 1),
	Port_Property("finishExperiment", 1, hls_in, 25, "ap_none", "in_data", 1),
	Port_Property("clientPkgNum", 32, hls_in, 26, "ap_none", "in_data", 1),
	Port_Property("regIpAddress0", 32, hls_in, 27, "ap_none", "in_data", 1),
	Port_Property("regIpAddress1", 32, hls_in, 28, "ap_none", "in_data", 1),
	Port_Property("regIpAddress2", 32, hls_in, 29, "ap_none", "in_data", 1),
	Port_Property("regIpAddress3", 32, hls_in, 30, "ap_none", "in_data", 1),
	Port_Property("regIpAddress4", 32, hls_in, 31, "ap_none", "in_data", 1),
	Port_Property("regIpAddress5", 32, hls_in, 32, "ap_none", "in_data", 1),
	Port_Property("regIpAddress6", 32, hls_in, 33, "ap_none", "in_data", 1),
	Port_Property("regIpAddress7", 32, hls_in, 34, "ap_none", "in_data", 1),
	Port_Property("regIpAddress8", 32, hls_in, 35, "ap_none", "in_data", 1),
	Port_Property("regIpAddress9", 32, hls_in, 36, "ap_none", "in_data", 1),
	Port_Property("regIpAddress10", 32, hls_in, 37, "ap_none", "in_data", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axis_open_status_TVALID", 1, hls_in, 10, "axis", "in_vld", 1),
	Port_Property("s_axis_open_status_TREADY", 1, hls_out, 10, "axis", "in_acc", 1),
	Port_Property("s_axis_tx_status_TVALID", 1, hls_in, 17, "axis", "in_vld", 1),
	Port_Property("s_axis_tx_status_TREADY", 1, hls_out, 17, "axis", "in_acc", 1),
	Port_Property("m_axis_tx_data_TVALID", 1, hls_out, 16, "axis", "out_vld", 1),
	Port_Property("m_axis_tx_data_TREADY", 1, hls_in, 16, "axis", "out_acc", 1),
	Port_Property("s_axis_rx_data_TVALID", 1, hls_in, 8, "axis", "in_vld", 1),
	Port_Property("s_axis_rx_data_TREADY", 1, hls_out, 8, "axis", "in_acc", 1),
	Port_Property("m_axis_open_connection_TVALID", 1, hls_out, 9, "axis", "out_vld", 1),
	Port_Property("m_axis_open_connection_TREADY", 1, hls_in, 9, "axis", "out_acc", 1),
	Port_Property("m_axis_tx_metadata_TVALID", 1, hls_out, 12, "axis", "out_vld", 1),
	Port_Property("m_axis_tx_metadata_TREADY", 1, hls_in, 12, "axis", "out_acc", 1),
	Port_Property("m_axis_close_connection_TVALID", 1, hls_out, 11, "axis", "out_vld", 1),
	Port_Property("m_axis_close_connection_TREADY", 1, hls_in, 11, "axis", "out_acc", 1),
	Port_Property("m_axis_listen_port_TVALID", 1, hls_out, 0, "axis", "out_vld", 1),
	Port_Property("m_axis_listen_port_TREADY", 1, hls_in, 0, "axis", "out_acc", 1),
	Port_Property("s_axis_listen_port_status_TVALID", 1, hls_in, 1, "axis", "in_vld", 1),
	Port_Property("s_axis_listen_port_status_TREADY", 1, hls_out, 1, "axis", "in_acc", 1),
	Port_Property("s_axis_notifications_TVALID", 1, hls_in, 2, "axis", "in_vld", 1),
	Port_Property("s_axis_notifications_TREADY", 1, hls_out, 2, "axis", "in_acc", 1),
	Port_Property("m_axis_read_package_TVALID", 1, hls_out, 3, "axis", "out_vld", 1),
	Port_Property("m_axis_read_package_TREADY", 1, hls_in, 3, "axis", "out_acc", 1),
	Port_Property("s_axis_rx_metadata_TVALID", 1, hls_in, 4, "axis", "in_vld", 1),
	Port_Property("s_axis_rx_metadata_TREADY", 1, hls_out, 4, "axis", "in_acc", 1),
};
const char* HLS_Design_Meta::dut_name = "scatter";
